{"version":3,"sources":["CopyButton.jsx","lib.js","BookerUrl.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["CopyButton","text","updateClipboard","newClip","a","navigator","clipboard","writeText","e","console","log","Button","variant","size","onClick","icon","faClipboard","postData","url","data","fetch","method","headers","Accept","body","JSON","stringify","response","json","formatDate","d","Date","getMonth","toString","padStart","getDate","getFullYear","getQueryString","params","endDate","startDate","query","type","status","dateRangeType","Object","keys","map","key","join","BookerUrl","displayText","href","target","rel","App","useState","output","setOutput","approvalNeeded","setApprovalNeeded","useEffect","localStorage","getItem","super_admin_list","className","Form","Group","File","id","label","multiple","accept","onChange","event","fileObj","files","reader","FileReader","readAsText","onload","date","csv","result","setItem","names","sort","onerror","error","uploadFile","length","split","name","removeItem","filename","toISOString","content","contentType","document","createElement","file","Blob","URL","createObjectURL","download","click","revokeObjectURL","downloadToFile","Table","striped","bordered","hover","slice","line","num","created","start","end","hrs","ot","rate","hol","pay","total","Number","parseFloat","toFixed","style","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ad403171.chunk.js","sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faClipboard } from \"@fortawesome/free-solid-svg-icons\";\nimport Button from \"react-bootstrap/Button\";\n\nconst CopyButton = ({ text }) => {\n  const updateClipboard = async (newClip) => {\n    try {\n      navigator.clipboard.writeText(newClip);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return (\n    <>\n      <Button\n        variant=\"outline-secondary\"\n        size=\"sm\"\n        onClick={() => updateClipboard(text)}\n      >\n        <FontAwesomeIcon icon={faClipboard} />\n      </Button>\n    </>\n  );\n};\n\nexport default CopyButton;\n","export const updateClipboard = async (newClip) => {\n  try {\n    navigator.clipboard.writeText(newClip);\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport const postData = async (url = \"\", data = {}) => {\n  // Default options are marked with *\n  const response = await fetch(url, {\n    method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n    // mode: \"cors\", // no-cors, *cors, same-origin\n    // cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n    // credentials: \"same-origin\", // include, *same-origin, omit\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      // 'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n  });\n  return response.json(); // parses JSON response into native JavaScript objects\n};\n","const queryString = (params) =>\n  Object.keys(params)\n    .map((key) => key + '=' + params[key])\n    .join('&');\n\nconst formatDate = (d = new Date()) =>\n  (d.getMonth() + 1).toString().padStart(2, '0') +\n  '/' +\n  d.getDate().toString().padStart(2, '0') +\n  '/' +\n  d.getFullYear();\n\nconst getQueryString = () => {\n  const endDate = new Date();\n  const startDate = new Date(endDate - 12 * 24 * 60 * 60 * 1000);\n  const query = {\n    startDate: formatDate(startDate),\n    endDate: formatDate(endDate),\n    type: 'HOURLY',\n    status: 'submitted,confirmed,preapproved',\n    dateRangeType: 'workDate',\n  };\n  return queryString(query);\n};\n\nconst BookerUrl = ({ displayText }) => (\n  <a\n    href={'https://www.snapnursebooker.com/admin/timecards?' + getQueryString()}\n    target=\"_blank\"\n    rel=\"noreferrer\"\n  >\n    {displayText}\n  </a>\n);\n\nexport default BookerUrl;\n","import { useState, useEffect } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\n// import DatePicker from \"react-datepicker\";\nimport CopyButton from './CopyButton';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { updateClipboard, postData } from './lib';\nimport BookerUrl from './BookerUrl';\n\nconst downloadToFile = (content, filename, contentType) => {\n  const a = document.createElement('a');\n  const file = new Blob([content], { type: contentType });\n\n  a.href = URL.createObjectURL(file);\n  a.download = filename;\n  a.click();\n\n  URL.revokeObjectURL(a.href);\n};\n\nconst App = () => {\n  const date = '2021-01-01';\n  const [output, setOutput] = useState('');\n  const [approvalNeeded, setApprovalNeeded] = useState('');\n\n  const handleClickDownload = () => {\n    const filename =\n      'Holiday Pay Adjustments' + new Date().toISOString() + '.csv';\n    downloadToFile(output, filename, 'text/csv');\n  };\n\n  const uploadFile = (event) => {\n    const fileObj = event.target.files[0]; // We've not allowed multiple files.\n    const reader = new FileReader();\n\n    try {\n      reader.readAsText(fileObj); // read the filek\n    } catch (e) {\n      console.log(e);\n    }\n\n    reader.onload = async () => {\n      console.log('POSTING...');\n      const url = 'https://lraulin.pythonanywhere.com/holiday';\n      const { csv, super_admin_list } = await postData(url, {\n        date,\n        csv: reader.result,\n      });\n      setOutput(csv);\n      localStorage.setItem('output', csv);\n      if (super_admin_list) {\n        const names = super_admin_list.sort().join(', ');\n        setApprovalNeeded(names);\n        localStorage.setItem('super_admin_list', names);\n      }\n    };\n\n    reader.onerror = () => {\n      console.log(reader.error);\n    };\n  };\n\n  const clearData = () => {\n    setOutput('');\n    setApprovalNeeded('');\n    localStorage.removeItem('output');\n    localStorage.removeItem('super_admin_list');\n  };\n\n  useEffect(() => {\n    const data = localStorage.getItem('output');\n    const super_admin_list = localStorage.getItem('super_admin_list');\n    if (data) {\n      setOutput(data);\n      setApprovalNeeded(super_admin_list);\n    }\n  }, []);\n\n  return (\n    <div className=\"App\">\n      Follow <BookerUrl displayText=\"this link\" /> and click \"Export CSV\".\n      <Form>\n        <Form.Group>\n          <Form.File\n            id=\"fileChooser\"\n            label=\"Select the downloaded text file in your Downloads folder.\"\n            multiple={false}\n            accept=\".csv,.txt,text/csv,text/plain\"\n            onChange={(event) => uploadFile(event)}\n          />\n        </Form.Group>\n      </Form>\n      {approvalNeeded && approvalNeeded.length ? (\n        <>\n          <h3>Admin Approval Needed For:</h3>\n          {approvalNeeded.split(', ').map((name) => (\n            <span onClick={() => updateClipboard(name)}>{name},</span>\n          ))}\n        </>\n      ) : null}\n      {output ? (\n        <div id=\"outputDisplay\">\n          <div className=\"float-right\">\n            <Button variant=\"danger\" onClick={clearData}>\n              Reset\n            </Button>\n            <Button variant=\"info\" onClick={handleClickDownload}>\n              Download\n            </Button>\n          </div>\n          <Table striped bordered hover>\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>Created At</th>\n                <th>Worker</th>\n                <th>Start Time</th>\n                <th>End Time</th>\n                <th>Total Hours</th>\n                <th>Overtime</th>\n                <th>Pay Rate</th>\n                <th>Memo</th>\n                <th>Adjustment</th>\n                <th>Total</th>\n              </tr>\n            </thead>\n            <tbody>\n              {output\n                .split('\\n')\n                .slice(1)\n                .map((line) => (\n                  <tr>\n                    {(() => {\n                      const [\n                        num,\n                        created,\n                        name,\n                        start,\n                        end,\n                        hrs,\n                        ot,\n                        rate,\n                        hol,\n                        pay,\n                        total,\n                      ] = line.split(',');\n                      return (\n                        <>\n                          <td>{num}</td>\n                          <td>{created}</td>\n                          <td>\n                            {name}\n                            <div className=\"float-right\">\n                              <CopyButton text={name} />\n                            </div>\n                          </td>\n                          <td>{start}</td>\n                          <td>{end}</td>\n                          <td>{hrs}</td>\n                          <td>{ot}</td>\n                          <td>${rate}</td>\n                          <td>\n                            {hol} HOL\n                            <div className=\"float-right\">\n                              <CopyButton text={hol + ' HOL'} />\n                            </div>\n                          </td>\n                          <td>\n                            ${pay}\n                            <div className=\"float-right\">\n                              <CopyButton\n                                text={Number.parseFloat(pay).toFixed(2)}\n                              />\n                            </div>\n                          </td>\n                          {Number.parseFloat(total) >= 2000 ? (\n                            <td style={{ color: 'red' }}>${total}</td>\n                          ) : (\n                            <td>${total}</td>\n                          )}\n                        </>\n                      );\n                    })()}\n                  </tr>\n                ))}\n            </tbody>\n          </Table>\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}