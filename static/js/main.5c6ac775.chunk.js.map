{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["a","url","data","fetch","method","headers","body","JSON","stringify","response","json","App","useState","csv","setCsv","output","setOutput","className","Form","Group","controlId","Label","Control","as","rows","value","onChange","e","target","Button","variant","onClick","console","log","postData","date","then","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iSASA,4CAAAA,EAAA,6DAAwBC,EAAxB,+BAA8B,GAAIC,EAAlC,+BAAyC,GAAzC,SAEyBC,MAAMF,EAAK,CAChCG,OAAQ,OAIRC,QAAS,CACP,eAAgB,oBAKlBC,KAAMC,KAAKC,UAAUN,KAbzB,cAEQO,EAFR,yBAeSA,EAASC,QAflB,4C,sBAwDeC,MAtCf,WAEE,IAFa,EAGSC,mBAAS,IAHlB,mBAGNC,EAHM,KAGDC,EAHC,OAIeF,mBAAS,IAJxB,mBAING,EAJM,KAIEC,EAJF,KAeb,OACE,sBAAKC,UAAU,MAAf,UACE,eAACC,EAAA,EAAD,WACE,eAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,+BAAtB,UAEE,cAACF,EAAA,EAAKG,MAAN,uCACA,cAACH,EAAA,EAAKI,QAAN,CACEC,GAAG,WACHC,KAAM,EACNC,MAAOZ,EACPa,SAAU,SAACC,GAAD,OAAOb,EAAOa,EAAEC,OAAOH,aAGrC,cAACI,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAtBX,WACnBC,QAAQC,IAAI,c,0CAEZC,CA7BQ,4CA6BM,CAAEC,KAPL,aAOWtB,QAAOuB,MAAK,SAAClC,GACjCc,EAAUd,GACV8B,QAAQC,IAAI/B,OAiBV,uBAIF,wCACA,4BAAIa,QChDKsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBH,MAAK,YAAkD,IAA/CI,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5c6ac775.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n// import DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\n// const URL = \"http://127.0.0.1:5000/holiday\";\nconst URL = \"http://lraulin.pythonanywhere.com/holiday\";\n\nasync function postData(url = \"\", data = {}) {\n  // Default options are marked with *\n  const response = await fetch(url, {\n    method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n    // mode: \"cors\", // no-cors, *cors, same-origin\n    // cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n    // credentials: \"same-origin\", // include, *same-origin, omit\n    headers: {\n      \"Content-Type\": \"application/json\",\n      // 'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    // redirect: \"follow\", // manual, *follow, error\n    // referrerPolicy: \"no-referrer\", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n    body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n  });\n  return response.json(); // parses JSON response into native JavaScript objects\n}\n\nfunction App() {\n  // const [date, setDate] = useState(new Date(2021, 1, 1));\n  const date = \"2021-01-01\";\n  const [csv, setCsv] = useState(\"\");\n  const [output, setOutput] = useState(\"\");\n\n  const handleSubmit = () => {\n    console.log(\"POSTING...\");\n    // const formattedDate = date.toISOString().slice(0, 10);\n    postData(URL, { date, csv }).then((data) => {\n      setOutput(data);\n      console.log(data); // JSON data parsed by `data.json()` call\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <Form>\n        <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n          {/* <DatePicker selected={date} onChange={(date) => setDate(date)} /> */}\n          <Form.Label>Paste booker export here</Form.Label>\n          <Form.Control\n            as=\"textarea\"\n            rows={3}\n            value={csv}\n            onChange={(e) => setCsv(e.target.value)}\n          />\n        </Form.Group>\n        <Button variant=\"primary\" onClick={handleSubmit}>\n          Submit\n        </Button>\n      </Form>\n      <h3>Output</h3>\n      <p>{output}</p>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}