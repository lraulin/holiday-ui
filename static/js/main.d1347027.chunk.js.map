{"version":3,"sources":["CopyButton.js","App.js","reportWebVitals.js","index.js"],"names":["CopyButton","text","updateClipboard","newClip","a","navigator","clipboard","writeText","e","console","log","Button","class","variant","size","onClick","icon","faClipboard","url","data","fetch","method","headers","body","JSON","stringify","response","json","App","useState","csv","setCsv","output","setOutput","className","Form","Group","controlId","Label","Control","as","rows","value","onChange","target","postData","date","then","Table","striped","bordered","hover","split","map","header","slice","line","cell","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQA2BeA,EAvBI,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACdC,EAAe,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sDACtB,IACEC,UAAUC,UAAUC,UAAUJ,GAC9B,MAAOK,GACPC,QAAQC,IAAIF,GAJQ,2CAAH,sDAQrB,OACE,mCACE,cAACG,EAAA,EAAD,CACEC,MAAM,cACNC,QAAQ,oBACRC,KAAK,KACLC,QAAS,kBAAMb,EAAgBD,IAJjC,SAME,cAAC,IAAD,CAAiBe,KAAMC,W,kDCV/B,4CAAAb,EAAA,6DAAwBc,EAAxB,+BAA8B,GAAIC,EAAlC,+BAAyC,GAAzC,SAEyBC,MAAMF,EAAK,CAChCG,OAAQ,OAIRC,QAAS,CACP,eAAgB,oBAKlBC,KAAMC,KAAKC,UAAUN,KAbzB,cAEQO,EAFR,yBAeSA,EAASC,QAflB,4C,sBAiHeC,MA/Ff,WAEE,IAFa,EAGSC,mBAAS,IAHlB,mBAGNC,EAHM,KAGDC,EAHC,OAIeF,mBAAS,IAJxB,mBAING,EAJM,KAIEC,EAJF,KAeb,OACE,sBAAKC,UAAU,MAAf,UACE,eAACC,EAAA,EAAD,WACE,eAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,+BAAtB,UAEE,cAACF,EAAA,EAAKG,MAAN,UACE,6DAEF,cAACH,EAAA,EAAKI,QAAN,CACEC,GAAG,WACHC,KAAM,EACNC,MAAOZ,EACPa,SAAU,SAACnC,GAAD,OAAOuB,EAAOvB,EAAEoC,OAAOF,aAGrC,cAAC/B,EAAA,EAAD,CAAQE,QAAQ,UAAUE,QAxBX,WACnBN,QAAQC,IAAI,c,0CAEZmC,CA7BQ,6CA6BM,CAAEC,KAPL,aAOWhB,QAAOiB,MAAK,SAAC5B,GACjCc,EAAUd,GACVV,QAAQC,IAAIS,OAmBV,uBAIF,kEACA,+BACE,+DACA,yFACA,+EAEF,4EACA,+BACE,8CACe,IADf,+DAIA,iIAIA,gOAGyD,OAEzD,2HAKF,uCACA,eAAC6B,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAA7B,UACE,gCACE,6BACGnB,EACEoB,MAAM,MAAM,GACZA,MAAM,KACNC,KAAI,SAACC,GAAD,OACH,6BAAKA,WAIb,gCACGtB,EACEoB,MAAM,MACNG,MAAM,GACNF,KAAI,SAACG,GAAD,OACH,6BACGA,EAAKJ,MAAM,KAAKC,KAAI,SAACI,GAAD,OACnB,+BACGA,EACA,KACD,qBAAKvB,UAAU,cAAf,SACE,cAAC,EAAD,CAAYjC,KAAMwD,0BCpGzBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d1347027.chunk.js","sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faClipboard } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nconst CopyButton = ({ text }) => {\r\n  const updateClipboard = async (newClip) => {\r\n    try {\r\n      navigator.clipboard.writeText(newClip);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        class=\"float-right\"\r\n        variant=\"outline-secondary\"\r\n        size=\"sm\"\r\n        onClick={() => updateClipboard(text)}\r\n      >\r\n        <FontAwesomeIcon icon={faClipboard} />\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CopyButton;\r\n","import { useState } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Table from \"react-bootstrap/Table\";\r\n// import DatePicker from \"react-datepicker\";\r\nimport CopyButton from \"./CopyButton\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\n// const URL = \"http://127.0.0.1:5000/holiday\";\r\nconst URL = \"https://lraulin.pythonanywhere.com/holiday\";\r\n\r\nasync function postData(url = \"\", data = {}) {\r\n  // Default options are marked with *\r\n  const response = await fetch(url, {\r\n    method: \"POST\", // *GET, POST, PUT, DELETE, etc.\r\n    // mode: \"cors\", // no-cors, *cors, same-origin\r\n    // cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n    // credentials: \"same-origin\", // include, *same-origin, omit\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      // 'Content-Type': 'application/x-www-form-urlencoded',\r\n    },\r\n    // redirect: \"follow\", // manual, *follow, error\r\n    // referrerPolicy: \"no-referrer\", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\r\n    body: JSON.stringify(data), // body data type must match \"Content-Type\" header\r\n  });\r\n  return response.json(); // parses JSON response into native JavaScript objects\r\n}\r\n\r\nfunction App() {\r\n  // const [date, setDate] = useState(new Date(2021, 1, 1));\r\n  const date = \"2021-01-01\";\r\n  const [csv, setCsv] = useState(\"\");\r\n  const [output, setOutput] = useState(\"\");\r\n\r\n  const handleSubmit = () => {\r\n    console.log(\"POSTING...\");\r\n    // const formattedDate = date.toISOString().slice(0, 10);\r\n    postData(URL, { date, csv }).then((data) => {\r\n      setOutput(data);\r\n      console.log(data); // JSON data parsed by `data.json()` call\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Form>\r\n        <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n          {/* <DatePicker selected={date} onChange={(date) => setDate(date)} /> */}\r\n          <Form.Label>\r\n            <em>Paste Booker export here:</em>\r\n          </Form.Label>\r\n          <Form.Control\r\n            as=\"textarea\"\r\n            rows={3}\r\n            value={csv}\r\n            onChange={(e) => setCsv(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n        <Button variant=\"primary\" onClick={handleSubmit}>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n      <h3>Instructions (If using Windows):</h3>\r\n      <ul>\r\n        <li>Export Timecards from Booker.</li>\r\n        <li>Open downloaded file with Notepad; select all and copy.</li>\r\n        <li>Paste into textbox above and click button.</li>\r\n      </ul>\r\n      <h4>Optional (If you want to view it in Excel)</h4>\r\n      <ul>\r\n        <li>\r\n          Right click {\">\"} Inspect or Ctrl+Shift+I (if in Chrome) to open\r\n          DevTools.\r\n        </li>\r\n        <li>\r\n          Click on \"Console\" tab and scroll to bottom to find text after the\r\n          line that says \"POSTING...\".\r\n        </li>\r\n        <li>\r\n          Copy all that text. You might have to click \"show more\" on the bottom\r\n          right to see it all. You should be able to click on \"Copy\" on the\r\n          bottom right; selecting the text should work fine too.{\" \"}\r\n        </li>\r\n        <li>\r\n          Paste into Notepad and save as *.csv file. Now you should be able to\r\n          open it in Excel!\r\n        </li>\r\n      </ul>\r\n      <h3>Table</h3>\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            {output\r\n              .split(\"\\n\")[0]\r\n              .split(\",\")\r\n              .map((header) => (\r\n                <th>{header}</th>\r\n              ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {output\r\n            .split(\"\\n\")\r\n            .slice(1)\r\n            .map((line) => (\r\n              <tr>\r\n                {line.split(\",\").map((cell) => (\r\n                  <td>\r\n                    {cell}\r\n                    {\"  \"}\r\n                    <div className=\"float-right\">\r\n                      <CopyButton text={cell} />\r\n                    </div>\r\n                  </td>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n        </tbody>\r\n      </Table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}