{"version":3,"sources":["CopyButton.js","App.js","reportWebVitals.js","index.js"],"names":["CopyButton","text","updateClipboard","newClip","a","navigator","clipboard","writeText","e","console","log","variant","size","onClick","icon","faClipboard","global","URL","createObjectURL","revokeObjectURL","postData","url","data","fetch","method","headers","Accept","body","JSON","stringify","response","json","App","useState","output","setOutput","className","Group","File","id","label","multiple","accept","onChange","event","fileObj","target","files","reader","FileReader","readAsText","onload","date","csv","result","onerror","error","uploadFile","filename","Date","toISOString","content","contentType","document","createElement","file","Blob","type","href","download","click","downloadToFile","striped","bordered","hover","split","slice","map","line","num","created","name","start","end","hrs","ot","rate","hol","pay","Number","parseFloat","toFixed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1be850e3.chunk.js","sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faClipboard } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nconst CopyButton = ({ text }) => {\r\n  const updateClipboard = async (newClip) => {\r\n    try {\r\n      navigator.clipboard.writeText(newClip);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        variant=\"outline-secondary\"\r\n        size=\"sm\"\r\n        onClick={() => updateClipboard(text)}\r\n      >\r\n        <FontAwesomeIcon icon={faClipboard} />\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CopyButton;\r\n\r\n(() => {})();\r\n","import { useState } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Table from \"react-bootstrap/Table\";\r\n// import DatePicker from \"react-datepicker\";\r\nimport CopyButton from \"./CopyButton\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nconst { createObjectURL, revokeObjectURL } = global.URL;\r\n\r\n// const URL = \"http://127.0.0.1:5000/holiday\";\r\nconst API_URL = \"https://lraulin.pythonanywhere.com/holiday\";\r\n\r\nconst postData = async (url = \"\", data = {}) => {\r\n  // Default options are marked with *\r\n  const response = await fetch(url, {\r\n    method: \"POST\", // *GET, POST, PUT, DELETE, etc.\r\n    // mode: \"cors\", // no-cors, *cors, same-origin\r\n    // cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n    // credentials: \"same-origin\", // include, *same-origin, omit\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n      // 'Content-Type': 'application/x-www-form-urlencoded',\r\n    },\r\n    body: JSON.stringify(data), // body data type must match \"Content-Type\" header\r\n  });\r\n  return response.json(); // parses JSON response into native JavaScript objects\r\n};\r\n\r\nconst downloadToFile = (content, filename, contentType) => {\r\n  const a = document.createElement(\"a\");\r\n  const file = new Blob([content], { type: contentType });\r\n\r\n  a.href = createObjectURL(file);\r\n  a.download = filename;\r\n  a.click();\r\n\r\n  revokeObjectURL(a.href);\r\n};\r\n\r\nconst App = () => {\r\n  const date = \"2021-01-01\";\r\n  const [output, setOutput] = useState(\"\");\r\n\r\n  const handleClickDownload = () => {\r\n    const filename =\r\n      \"Holiday Pay Adjustments\" + new Date().toISOString() + \".csv\";\r\n    downloadToFile(output, filename, \"text/csv\");\r\n  };\r\n\r\n  const uploadFile = (event) => {\r\n    const fileObj = event.target.files[0]; // We've not allowed multiple files.\r\n    const reader = new FileReader();\r\n\r\n    reader.readAsText(fileObj); // read the filek\r\n\r\n    reader.onload = async () => {\r\n      console.log(\"POSTING...\");\r\n      const data = await postData(API_URL, { date, csv: reader.result });\r\n      setOutput(data);\r\n      console.log(data);\r\n    };\r\n\r\n    reader.onerror = () => {\r\n      console.log(reader.error);\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Form>\r\n        <Form.Group>\r\n          <Form.File\r\n            id=\"fileChooser\"\r\n            label=\"Select exported Booker txt file.\"\r\n            multiple={false}\r\n            accept=\".csv,.txt,text/csv,text/plain\"\r\n            onChange={(event) => uploadFile(event)}\r\n          />\r\n        </Form.Group>\r\n      </Form>\r\n      {output ? (\r\n        <div id=\"outputDisplay\">\r\n          <h3>Table</h3>\r\n          <Button variant=\"info\" onClick={handleClickDownload}>\r\n            Download\r\n          </Button>\r\n          <Table striped bordered hover>\r\n            <thead>\r\n              <tr>\r\n                <th>#</th>\r\n                <th>Created At</th>\r\n                <th>Worker</th>\r\n                <th>Start Time</th>\r\n                <th>End Time</th>\r\n                <th>Total Hours</th>\r\n                <th>Overtime</th>\r\n                <th>Pay Rate</th>\r\n                <th>Memo</th>\r\n                <th>Adjustment</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {output\r\n                .split(\"\\n\")\r\n                .slice(1)\r\n                .map((line) => (\r\n                  <tr>\r\n                    {(() => {\r\n                      const [\r\n                        num,\r\n                        created,\r\n                        name,\r\n                        start,\r\n                        end,\r\n                        hrs,\r\n                        ot,\r\n                        rate,\r\n                        hol,\r\n                        pay,\r\n                      ] = line.split(\",\");\r\n                      return (\r\n                        <>\r\n                          <td>{num}</td>\r\n                          <td>{created}</td>\r\n                          <td>\r\n                            {name}\r\n                            <div className=\"float-right\">\r\n                              <CopyButton text={name} />\r\n                            </div>\r\n                          </td>\r\n                          <td>{start}</td>\r\n                          <td>{end}</td>\r\n                          <td>{hrs}</td>\r\n                          <td>{ot}</td>\r\n                          <td>${rate}</td>\r\n                          <td>\r\n                            {hol} HOL\r\n                            <div className=\"float-right\">\r\n                              <CopyButton text={hol + \" HOL\"} />\r\n                            </div>\r\n                          </td>\r\n                          <td>\r\n                            ${pay}\r\n                            <div className=\"float-right\">\r\n                              <CopyButton\r\n                                text={Number.parseFloat(pay).toFixed(2)}\r\n                              />\r\n                            </div>\r\n                          </td>\r\n                        </>\r\n                      );\r\n                    })()}\r\n                  </tr>\r\n                ))}\r\n            </tbody>\r\n          </Table>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}